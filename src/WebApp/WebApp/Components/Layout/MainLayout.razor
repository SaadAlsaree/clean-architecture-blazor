@inherits LayoutComponentBase
@inject ThemeSettings SettingsService



<MudRTLProvider RightToLeft="@_rightToLeft">
    <MudThemeProvider DefaultScrollbar="true" @ref="_mudThemeProvider" Theme="_currentTheme"
        @bind-IsDarkMode="_isDarkMode" />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />

    <MudLayout>
        <AppBar DrawerOpen="_drawerOpen" OnDrawerToggle="DrawerToggle" RightToLeft="_rightToLeft"
            RightToLeftChanged="OnRightToLeftChanged" IsDarkMode="_isDarkMode"
            IsDarkModeChanged="OnIsDarkModeChanged" />
        <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
            @*NavMenu*@
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.Medium">
                @Body
            
            </MudContainer>
        </MudMainContent>
        <MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" />
        <MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager"
            ThemeChanged="UpdateTheme" />
    </MudLayout>
</MudRTLProvider>


@code {
    bool _drawerOpen = true;
    private bool _rightToLeft = true;
    private bool _isDarkMode;
    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();
    public bool _themeManagerOpen = false;
    private MudThemeProvider _mudThemeProvider = null!;
    private MudTheme _currentTheme = new()
    {
        PaletteLight = new PaletteLight
        {
            Primary = Colors.Blue.Darken2,
            Secondary = Colors.Green.Accent4,
        },
     
        LayoutProperties = new LayoutProperties()
        {
            DefaultBorderRadius = "8px",
            AppbarHeight = "64px",
            DrawerWidthLeft = "260px",
            DrawerWidthRight = "300px"
        }
    };

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }

    void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }

    private async Task OnRightToLeftChanged(bool value)
    {
        _rightToLeft = value;
        await SaveSettingsAsync();
        StateHasChanged();
    }

    private async Task OnIsDarkModeChanged(bool value)
    {
        _isDarkMode = value;
        await SaveSettingsAsync();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load settings from local storage
            var settings = await SettingsService.LoadSettingsAsync();
            _rightToLeft = settings.RightToLeft;
            _isDarkMode = settings.IsDarkMode;

            StateHasChanged();
        }
    }

    private async Task SaveSettingsAsync()
    {
        var settings = new AppSettings
        {
            RightToLeft = _rightToLeft,
            IsDarkMode = _isDarkMode
        };
        await SettingsService.SaveSettingsAsync(settings);
    }

    protected override void OnInitialized()
    {
        StateHasChanged();
    }
}


