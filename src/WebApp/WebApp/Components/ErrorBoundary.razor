@using Microsoft.AspNetCore.Components.Web
@inject ILogger<ErrorBoundary> Logger

@if (CurrentException is null)
{
    @ChildContent
}
else
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Error">
            <MudText Typo="Typo.h6">An error occurred</MudText>
            <MudText Typo="Typo.body2">
                @if (ShowDetails)
                {
                    @CurrentException.Message
                }
                else
                {
                    <text>Something went wrong. Please try again or contact support if the problem persists.</text>
                }
            </MudText>
            <MudStack Row Justify="Justify.FlexStart" Spacing="2" Class="mt-3">
                <MudButton Color="Color.Error" Variant="Variant.Text" OnClick="Recover">
                    Try Again
                </MudButton>
                @if (!ShowDetails)
                {
                    <MudButton Color="Color.Error" Variant="Variant.Text" OnClick="ToggleDetails">
                        Show Details
                    </MudButton>
                }
            </MudStack>
        </MudAlert>

        @if (ShowDetails && CurrentException is not null)
        {
            <MudExpansionPanels Elevation="2" Class="mt-4">
                <MudExpansionPanel Text="Error Details">
                    <MudText Typo="Typo.caption" Class="mud-text-secondary">Exception Type:</MudText>
                    <MudText Typo="Typo.body2" Class="mb-2">@CurrentException.GetType().Name</MudText>

                    <MudText Typo="Typo.caption" Class="mud-text-secondary">Message:</MudText>
                    <MudText Typo="Typo.body2" Class="mb-2">@CurrentException.Message</MudText>

                    @if (!string.IsNullOrEmpty(CurrentException.StackTrace))
                    {
                        <MudText Typo="Typo.caption" Class="mud-text-secondary">Stack Trace:</MudText>
                        <MudPaper Elevation="1" Class="pa-2" Style="background-color: var(--mud-palette-background-grey);">
                            <MudText Typo="Typo.caption" Style="font-family: monospace; white-space: pre-wrap;">
                                @CurrentException.StackTrace
                            </MudText>
                        </MudPaper>
                    }
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
    </MudContainer>
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool ShowDetails { get; set; } = false;

    public Exception? CurrentException { get; set; }

    public void ProcessError(Exception exception)
    {
        Logger.LogError(exception, "An unhandled error occurred");
        CurrentException = exception;
        StateHasChanged();
    }

    private void Recover()
    {
        CurrentException = null;
        ShowDetails = false;
        StateHasChanged();
    }

    private void ToggleDetails()
    {
        ShowDetails = !ShowDetails;
        StateHasChanged();
    }
}
