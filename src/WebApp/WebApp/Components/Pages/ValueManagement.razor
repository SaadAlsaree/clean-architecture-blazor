@page "/values"
@using Application.Features.ValueFeature.Queries.Shared
@using WebApp.ViewModels

@inject ValueManagementViewModel ViewModel

<PageTitle>Value Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" GutterBottom="true">Value Management</MudText>

    @* @if (ViewModel.IsLoading)
    {
        <MudProgressCircular Indeterminate="true" />
    } *@

    @if (ViewModel.HasError)
    {
        <MudAlert Severity="Severity.Error" Class="mb-4">
            <MudText Typo="Typo.h6">Error Loading Page</MudText>
            <MudText Typo="Typo.body2">@ViewModel.ErrorMessage</MudText>
            <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="RetryLoad">
                Retry
            </MudButton>
        </MudAlert>
    }

    <MudGrid Spacing="3">
        <!-- Filters and Search -->
        <MudItem xs="20">
            <MudPaper Elevation="1" Class="pa-4">
                <MudGrid>
                    <MudItem xs="20" sm="4">
                        <MudTextField @bind-Value="ViewModel.SearchTerm" @bind-Value:after="OnSearchTermChanged" 
                            Label="Search Values" Adornment="Adornment.End"
                            AdornmentIcon="@Icons.Material.Filled.Search" OnAdornmentClick="SearchValues"
                            OnKeyUp="OnSearchKeyUp" />
                    </MudItem>
                    <MudItem xs="20" sm="3">
                        <MudSelect @bind-Value="ViewModel.SelectedStatus" @bind-Value:after="OnStatusChanged" 
                            Label="Status Filter" T="int?">
                            <MudSelectItem Value="@((int?)null)">All</MudSelectItem>
                            <MudSelectItem Value="@((int?)0)">Unverified</MudSelectItem>
                            <MudSelectItem Value="@((int?)1)">Verified</MudSelectItem>
                            <MudSelectItem Value="@((int?)2)">Active</MudSelectItem>
                            <MudSelectItem Value="@((int?)3)">Inactive</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="3">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                            OnClick="OpenCreateDialog">
                            Add New Value
                        </MudButton>
                    </MudItem>
                    <MudItem xs="12" sm="2">
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary"
                            StartIcon="@Icons.Material.Filled.Refresh" OnClick="RefreshData">
                            Refresh
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>

        <!-- Data Table -->
        <MudItem xs="12">
            <MudPaper Elevation="2">
                <MudDataGrid @ref="dataGrid" T="ValueViewModel" ServerData="@ViewModel.LoadServerDataAsync" Hover="true" Dense="true"
                    FixedHeader="true" Height="600px" SortMode="SortMode.Multiple" Filterable="true">

                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Values (@ViewModel.TotalItems)</MudText>
                            <MudSpacer />
                            <MudTextField @bind-Value="ViewModel.QuickSearchString" @bind-Value:after="OnQuickSearchChanged"
                                Placeholder="Quick search..."
                                Adornment="Adornment.Start" AdornmentIcon="Icons.Material.Filled.Search"
                                IconSize="Size.Medium" Class="mt-0" Immediate="true" />
                        </ToolBarContent>

                        <Columns>
                            <PropertyColumn Property="x => x.Name" Title="Name" />
                            <PropertyColumn Property="x => x.ValueNumber" Title="Value Number" />
                            <PropertyColumn Property="x => x.StatusName" Title="Status">
                                <CellTemplate>
                                    <MudChip Color="@ViewModel.GetStatusColor(context.Item.StatusId)" Size="Size.Small">
                                        @context.Item.StatusName
                                    </MudChip>
                                </CellTemplate>
                            </PropertyColumn>
                            <PropertyColumn Property="x => x.CreatedAt" Title="Created" Format="dd/MM/yyyy HH:mm" />
                            <PropertyColumn Property="x => x.UpdatedAt" Title="Updated" Format="dd/MM/yyyy HH:mm" />

                            <TemplateColumn CellClass="d-flex justify-end" Sortable="false" Filterable="false">
                                <CellTemplate>
                                    <MudStack Row>
                                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Edit"
                                            Color="Color.Primary" OnClick="() => OpenEditDialog(context.Item)" />
                                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Delete"
                                            Color="Color.Error" OnClick="() => DeleteValue(context.Item.Id)" />
                                    </MudStack>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>

                    <PagerContent>
                        <MudDataGridPager T="ValueViewModel" />
                    </PagerContent>
                </MudDataGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private MudDataGrid<ValueViewModel>? dataGrid;

    protected override async Task OnInitializedAsync()
    {
        ViewModel.SetStateHasChanged(StateHasChanged);
        await ViewModel.InitializeAsync();
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (dataGrid != null)
        {
            await ViewModel.OnSearchKeyUpAsync(e, dataGrid);
        }
    }

    private async Task SearchValues()
    {
        if (dataGrid != null)
        {
            await ViewModel.SearchValuesAsync(dataGrid);
        }
    }

    private async Task RefreshData()
    {
        if (dataGrid != null)
        {
            await ViewModel.RefreshDataAsync(dataGrid);
        }
    }

    private async Task RetryLoad()
    {
        if (dataGrid != null)
        {
            await ViewModel.RetryLoadAsync(dataGrid);
        }
    }

    private async Task OpenCreateDialog()
    {
        var needsRefresh = await ViewModel.OpenCreateDialogAsync();
        if (needsRefresh && dataGrid != null)
        {
            await ViewModel.RefreshDataAsync(dataGrid);
        }
    }

    private async Task OpenEditDialog(ValueViewModel value)
    {
        var needsRefresh = await ViewModel.OpenEditDialogAsync(value);
        if (needsRefresh && dataGrid != null)
        {
            await ViewModel.RefreshDataAsync(dataGrid);
        }
    }

    private async Task DeleteValue(Guid id)
    {
        if (dataGrid != null)
        {
            await ViewModel.DeleteValueAsync(id, dataGrid);
        }
    }

    private async Task OnSearchTermChanged()
    {
        Console.WriteLine($"OnSearchTermChanged - SearchTerm: {ViewModel.SearchTerm}");
        if (dataGrid != null)
        {
            await ViewModel.SearchValuesAsync(dataGrid);
        }
    }

    private async Task OnStatusChanged()
    {
        Console.WriteLine($"OnStatusChanged - SelectedStatus: {ViewModel.SelectedStatus}");
        if (dataGrid != null)
        {
            await ViewModel.SearchValuesAsync(dataGrid);
        }
    }

    private async Task OnQuickSearchChanged()
    {
        Console.WriteLine($"OnQuickSearchChanged - QuickSearchString: {ViewModel.QuickSearchString}");
        if (dataGrid != null)
        {
            await ViewModel.SearchValuesAsync(dataGrid);
        }
    }
}